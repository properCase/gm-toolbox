=size($width, $height: $width)
  width: $width
  height: $height

=centerAbsoluteX()
  left: 50%
  transform: translateX(-50%)

=centerAbsoluteY()
  top: 50%
  transform: translateY(-50%)

=centerAbsolute()
  top: 50%
  left: 50%
  transform: translate(-50%, -50%)

=centerWithinStatic()
  top: 50%
  left: 50%
  transform: translate(50%, 50%)

=fullScreen()
  position: fixed
  top: 0
  left: 0
  bottom: 0
  right: 0

=show()
  visibility: visible
  opacity: 1
  max-height: initial
=hide()
  visibility: hidden
  opacity: 0
  max-height: 0

=sizeableWidth($width)
  min-width: $width
  max-width: $width
=sizeableHeight($height)
  min-height: $height
  max-height: $height

@mixin backgroundSizer($url, $positioning, $color: $tp)
  background: $color url('#{$url}') no-repeat #{$positioning}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth, $shadowColor)
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px
  $blur: nth(1.5 3 10 14 19, $depth) * 4px
  $color: rgba($shadowColor, nth(.12 .16 .19 .25 .30, $depth))
  @return 0 $primary-offset $blur $color

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth, $shadowColor)
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px
  $blur: nth(1 3 3 5 6, $depth) * 4px
  $color: rgba($shadowColor, nth(.24 .23 .23 .22 .22, $depth))
  @return 0 $primary-offset $blur $color

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
=card($depth, $shadowColor: black)
  @if $depth < 1
    box-shadow: none
  @else if $depth > 5
    @warn "Invalid $depth `#{$depth}` for mixin `card`."
  @else
    box-shadow: bottom-shadow($depth, $shadowColor), top-shadow($depth, $shadowColor)

=insetCard($depth, $shadowColor: black)
  @if $depth < 1
    box-shadow: none
  @else if $depth > 5
    @warn "Invalid $depth `#{$depth}` for mixin `card`."
  @else
    box-shadow: inset bottom-shadow($depth, $shadowColor), inset top-shadow($depth, $shadowColor)

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow-up($depth, $shadowColor)
  $primary-offset: nth(-1.5 -3 -10 -14 -19, $depth) * 1px
  $blur: nth(1.5 3 10 14 19, $depth) * 4px
  $color: rgba($shadowColor, nth(.12 .16 .19 .25 .30, $depth))
  @return 0 $primary-offset $blur $color

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow-up($depth, $shadowColor)
  $primary-offset: nth(-1.5 -3 -6 -10 -15, $depth) * 1px
  $blur: nth(1 3 3 5 6, $depth) * 4px
  $color: rgba($shadowColor, nth(.24 .23 .23 .22 .22, $depth))
  @return 0 $primary-offset $blur $color

=cardUp($depth, $shadowColor: black)
  @if $depth < 1
    box-shadow: none
  @else if $depth > 5
    @warn "Invalid $depth `#{$depth}` for mixin `card`."
  @else
    box-shadow: bottom-shadow-up($depth, $shadowColor), top-shadow-up($depth, $shadowColor)